
//the bones class created by conrad
public class Bones extends Ghost{

	private double longitude;
	private double latitude;
	private boolean pickedUp;
	private double teatherRadius;
	private double startLongitude;
	private double startLatitude;
	private double endLongitude;
	private double endLatitude;

	public void setStartLongitude(double startLongitude) {
		this.startLongitude = startLongitude;
	}

	public void setStartLatitude(double startLatitude) {
		this.startLatitude = startLatitude;
	}

	public Bones(double userLongitude, double userLatitude,
			double startLongitude, double startLatitude, double userRadius, double endLongitude, double endLatitude) {
		// User longitude/latitude is the point at which the user starts in the
		// game play
		// NOTE: assumed that the player is centered int the map
		// start long/lat is the top left corner of the gameplay field

		

		Random generator = new Random();

		int sectionNum = generator.nextInt(7 + 1);

		switch (sectionNum) {
		case 0:
			sectionNum = 0;
			longitude = startLongitude + generator.nextInt((int) calculateLeftBound(userLongitude, startLongitude,
				userRadius) + 1);
			latitude = startLatitude + generator.nextInt((int) calculateUpperBound(userLatitude, startLatitude,
				userRadius) + 1);
		case 1:
			sectionNum = 1;
			longitude = startLongitude + generator.nextInt((int) calculateLeftBound(userLongitude, startLongitude,
				userRadius) + 1)
					+ calculateLeftBound(userLongitude, startLongitude,
				userRadius);
			latitude = startLatitude + generator.nextInt((int) calculateUpperBound(userLatitude, startLatitude,
				userRadius) + 1);
		case 2:
			sectionNum = 2;
			longitude = startLongitude + generator.nextInt((int) calculateLeftBound(userLongitude, startLongitude,
				userRadius) + 1)
					+ calculateRightBound(userLongitude, endLongitude,
				userRadius);
			//could use end latitude
			latitude = startLatitude + generator.nextInt((int) calculateUpperBound(userLatitude, startLatitude,
				userRadius) + 1);
		case 3:
			sectionNum = 3;
			longitude = startLongitude + generator.nextInt((int) calculateLeftBound(userLongitude, startLongitude,
				userRadius) + 1);
			latitude = startLatitude + generator.nextInt((int) calculateUpperBound(userLatitude, startLatitude,
				userRadius) + 1)
					+ calculateUpperBound(userLatitude, startLatitude,
				userRadius);
		case 4:
			sectionNum = 4;
			longitude = startLongitude + generator.nextInt((int) calculateLeftBound(userLongitude, startLongitude,
				userRadius) + 1)
					+ calculateRightBound(userLongitude, endLongitude,
				userRadius);
			latitude = startLatitude + generator.nextInt((int) calculateUpperBound(userLatitude, startLatitude,
				userRadius) + 1)
					+ calculateUpperBound(userLatitude, startLatitude,
				userRadius);
		case 5:
			sectionNum = 5;
			longitude = startLongitude + generator.nextInt((int) calculateLeftBound(userLongitude, startLongitude,
				userRadius) + 1);
			latitude = startLatitude + generator.nextInt((int) calculateUpperBound(userLatitude, startLatitude,
				userRadius) + 1)
					+ calculateLowerBound(userLatitude, endLatitude,
				userRadius);
		case 6:
			sectionNum = 6;
			longitude = startLongitude + generator.nextInt((int) calculateLeftBound(userLongitude, startLongitude,
				userRadius) + 1)
					+ calculateLeftBound(userLongitude, startLongitude,
				userRadius);
			latitude = startLatitude + generator.nextInt((int) calculateUpperBound(userLatitude, startLatitude,
				userRadius) + 1)
					+ calculateLowerBound(userLatitude, endLatitude,
				userRadius);
		case 7:
			sectionNum = 7;
			longitude = startLongitude + generator.nextInt((int) calculateLeftBound(userLongitude, startLongitude,
				userRadius) + 1)
					+ calculateRightBound(userLongitude, endLongitude,
				userRadius);
			latitude = startLatitude + generator.nextInt((int) calculateUpperBound(userLatitude, startLatitude,
				userRadius) + 1)
					+ calculateLowerBound(userLatitude, endLatitude,
				userRadius);
		default:
			break;
		}

		// TODO: still need to physically put an image of the ghost on the map
	}

	private double calculateLeftBound(double userLongitude,
			double startLongitude, double userRadius) {

		return userLongitude - startLongitude - userRadius;
	}

	private double calculateRightBound(double userLongitude,
			double endLongitude, double userRadius) {

		return endLongitude - userLongitude + userRadius;
	}

	private double calculateUpperBound(double userLatitude,
			double startLatitude, double userRadius) {

		return userLatitude - startLatitude - userRadius;
	}

	private double calculateLowerBound(double userLatitude,
			double endLatitude, double userRadius) {

		return endLatitude - userLatitude  + userRadius;
	}
	
	
	//Conrad:
	//if the ghost is killed, the bones are destroyed
	public void onKilled(){
		this.setHasBones(false) ;
	}
	
	//if the bones are picked up, the bones are destroyed and the ghost is killed
	public void onPickUp(){
		this.setHasBones(false);
		this.onKill();
		
	}
	

}